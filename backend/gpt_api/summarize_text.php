<?php

// 1. ライブラリと環境変数の読み込み
// --------------------------------------------------
// Composerでインストールしたライブラリを読み込みます
require __DIR__ . '/vendor/autoload.php';

// .envファイルから環境変数を読み込みます
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();


// 2. APIキーの準備
// --------------------------------------------------
// .envファイルからAPIキーを取得します
$apiKey = $_ENV['OPENAI_API_KEY'];

// APIキーが設定されているか確認します
if (empty($apiKey) || $apiKey === "sk-...") {
    die("エラー: .envファイルに有効なOPENAI_API_KEYが設定されていません。\n");
}

// OpenAIのクライアントを初期化します
$client = OpenAI::client($apiKey);


// 3. 要約したいテキストと指示の設定
// --------------------------------------------------
// ★★★ ここに要約したい文章を入力してください ★★★
$longText = "きょうはようちえんにいったよ。
おはようっていったら、みんな「おはよう！」ってこたえてくれた。
せんせいといっしょにおにごっこしたよ。
いっぱいはしって、つかれたけどたのしかった！

おべんとうのじかんになったら、まいにちのふくろからおにぎりをだしたよ。
のりをまいて、ぱくってたべたらおいしかった！
ともだちとすこしわけっこしたんだ。

ごごはえほんをよんだり、えをかいたりしたよ。
ぼくはきいろいひこうきのえをかいたんだ。
せんせいが「じょうずだね！」ってほめてくれたの、うれしかったな。

さいごに、みんなで「さようなら！」っていっておうちにかえったよ。
きょうもたのしい1にちだった！人工知能（AI）は、人間の知的活動の一部を模倣または支援する技術の総称です。その応用範囲は広く、自動運転車、医療診断の補助、自然言語処理による対話システム、そして芸術作品の生成にまで及んでいます。特に近年では、深層学習（ディープラーニング）と呼ばれる技術が大きなブレークスルーをもたらし、画像認識や音声認識の精度を飛躍的に向上させました。しかし、AIの発展には倫理的な課題や社会への影響も伴うため、技術開発と並行してルール作りや議論を進めることが重要です。";

// AIへの指示（システムメッセージ）
$systemInstruction = <<<EOT
あなたは日本の小学生向けの「絵日記」のイラストプロンプトを作るアシスタントです。
ユーザーから与えられる情報：
1. 一日の出来事を含むテキスト
2. 日付（例：2025年10月19日）
3. 土地情報：幼稚園

次の手順でイラスト生成用プロンプトを作成してください：

1. テキストから、絵に描けそうなイベントを**4個ピックアップ**する。
2. ピックアップしたイベントは**箇条書きで端的に**まとめる。
3. それぞれのイベントを**1つの区画に描く**構成で、必ず**4区画の1枚の画像**として集約する。
4. 土地情報に合った人物や背景の描写を取り入れる。
5. イラストの特徴：
   - 明るくやさしい色合い
   - 水彩画風
   - 子どもの絵日記のようなタッチ
6. 出力形式：
   - 箇条書きでイベントを整理した文章のみ
   - JSONやコードブロックは使わない
   - 最後に必ず次の文を追加：
     「明るくやさしい色合い、水彩画風、子どもの絵日記のようなタッチで，それぞれのイベントを**1つの区画に描く**構成で、必ず**4区画の1枚の画像**として集約する。」
EOT;



echo "テキストの要約を開始します...\n";

try {
    // テキスト生成（チャット）APIを呼び出します
    $response = $client->chat()->create([
        // 'model' => 'gpt-3.5-turbo', // テキスト生成用のモデル
        'model' => 'gpt-4', // 高精度テキスト生成用のモデル

        'messages' => [
            // AIの役割や前提条件を指示
            ['role' => 'system', 'content' => $systemInstruction],
            // 処理してほしいテキストを渡す
            ['role' => 'user', 'content' => $longText],
        ],
    ]);

    // 応答から要約テキストを取り出します
    $summary = $response->choices[0]->message->content;

    // 結果を表示します
    echo "要約が完了しました！\n";
    echo "====================\n";
    echo $summary . "\n";
    echo "====================\n";

} catch (Exception $e) {
    // エラーが発生した場合の処理
    echo "エラーが発生しました: " . $e->getMessage() . "\n";
}